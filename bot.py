import logging
from telegram import ReplyKeyboardRemove, Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler, PicklePersistence,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(funcName)s - %(levelname)s - %(message)s", level=logging.INFO,
    filename='bot.log', encoding='utf-8',
)
logger = logging.getLogger(__name__)

PRE_QUESTIONNAIRE, QUESTIONNAIRE_START, GENDER, FIRST_NAME, LAST_NAME, AGE, PHOTO, PHONE_NUMBER, REGISTER_TIME, \
    EXIT, SEND_CONTACT, SEND_ANSWER, DID_PARTICIPATE = range(13)

CHAT_ID = "CHAT_ID"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s –Ω–∞–∂–∞–ª /start.", user.full_name, user.id)

    if "questionnaire_done" in context.user_data:
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É."
        )
        return ConversationHandler.END

    keyboard = [["üëç", "üëé"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>!\n"
        "–•–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ì–û –ò–ù–¢–ï–õ–ï–ö–¢–ê?",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

    return PRE_QUESTIONNAIRE


async def wrong_pre_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text(
        "–•–æ—á–µ—à—å –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ üëç –∏–ª–∏ üëé",
    )

    return PRE_QUESTIONNAIRE


async def pre_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    keyboard = [
        ["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.",
        reply_markup=reply_markup,
    )
    return QUESTIONNAIRE_START


async def questionnaire_decline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text(
        "–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /contact.\n"
        "–í–≤–µ–¥–∏—Ç–µ /start, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


async def questionnaire_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['id'] = user.id
    context.user_data['tg_name'] = str(user.full_name)

    keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, input_field_placeholder="–í–∞—à –ø–æ–ª",
                                       resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.",
        reply_markup=reply_markup,
    )

    return GENDER


async def wrong_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, input_field_placeholder="–í–∞—à –ø–æ–ª",
                                       resize_keyboard=True)
    await update.message.reply_text(
        "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=reply_markup,
    )

    return GENDER


async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['gender'] = update.message.text

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
        reply_markup=ReplyKeyboardRemove()
    )

    return FIRST_NAME


async def first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['first_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")

    return LAST_NAME


async def last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['last_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")

    return AGE


async def wrong_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 16-99.")

    return AGE


async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['age'] = update.message.text

    keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ).\n"
        "–ê–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=reply_markup
    )

    return PHOTO


async def wrong_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg/png.",
        reply_markup=reply_markup
    )

    return PHOTO


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['photo'] = update.message.photo[-1]

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞).",
        reply_markup=ReplyKeyboardRemove()
    )

    return PHONE_NUMBER


async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞).",
        reply_markup=ReplyKeyboardRemove()
    )

    return PHONE_NUMBER


async def wrong_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (999) 111-22-33",
    )

    return PHONE_NUMBER


async def phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['phone_number'] = update.message.text

    keyboard = [
        ["—Å 10 –¥–æ 12 —á–∞—Å–æ–≤ ‚Äî —É—Ç—Ä–æ"],
        ["—Å 12 –¥–æ 18 —á–∞—Å–æ–≤ ‚Äî –¥–µ–Ω—å"],
        ["—Å 18 –¥–æ 20 —á–∞—Å–æ–≤ ‚Äî –≤–µ—á–µ—Ä"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, input_field_placeholder="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç).",
        reply_markup=reply_markup,
    )

    return REGISTER_TIME


async def register_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['register_time'] = update.message.text

    keyboard = [["üëç", "üëé"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –≤ –ø–æ–¥–æ–±–Ω—ã—Ö —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
        reply_markup=reply_markup
    )

    return DID_PARTICIPATE


async def did_participate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    context.user_data['did_participate'] = update.message.text

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ <b>{user.first_name}</b> üòä\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /contact, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    context.user_data["questionnaire_done"] = True
    await send_questionnaire(update, context)

    return ConversationHandler.END


async def send_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, context.user_data)

    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer_" + str(update.message.from_user.id)),
            InlineKeyboardButton("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="location_" + str(update.message.from_user.id)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = f"–ó–∞—è–≤–∫–∞ –æ—Ç {update.effective_user.mention_html()}:\n" \
              f"Id: {context.user_data['id']}\n" \
              f"–ü–æ–ª: {context.user_data['gender']}\n" \
              f"–ò–º—è: {context.user_data['first_name']}\n" \
              f"–§–∞–º–∏–ª–∏—è: {context.user_data['last_name']}\n" \
              f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n" \
              f"–ù–æ–º–µ—Ä: {context.user_data['phone_number']}\n" \
              f"–í—Ä–µ–º—è: {context.user_data['register_time']}\n" \
              f"–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏: {context.user_data['did_participate']}"
    if 'photo' in context.user_data:
        await context.bot.send_photo(CHAT_ID, context.user_data['photo'], caption=message,
                                     parse_mode="HTML", reply_markup=reply_markup)
        return
    await context.bot.send_message(CHAT_ID, message, parse_mode="HTML", reply_markup=reply_markup)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    if 'contact_count' not in context.user_data:
        context.user_data['contact_count'] = 0
    if context.user_data['contact_count'] >= 5:
        await update.message.reply_text("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return ConversationHandler.END
    context.user_data['contact_count'] += 1

    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True,
                                       input_field_placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å")
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        reply_markup=reply_markup,
    )

    return SEND_CONTACT


async def send_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer_" + str(update.message.from_user.id)),
            InlineKeyboardButton("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="location_" + str(update.message.from_user.id)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.mention_html()} " \
              f"id: {update.message.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n" \
              f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}"
    await context.bot.send_message(CHAT_ID, message, parse_mode="HTML", reply_markup=reply_markup)

    return ConversationHandler.END


async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.callback_query.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.callback_query.message.text)

    query = update.callback_query
    await query.answer()

    user_id = query.data.partition('_')[2]
    context.user_data["answer_id"] = user_id

    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True,
                                       input_field_placeholder="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
    await query.message.reply_text(
        f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id:{user_id}",
        reply_markup=reply_markup,
    )

    return SEND_ANSWER


async def send_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.message.text)

    await context.bot.send_message(
        context.user_data["answer_id"],
        f"{update.message.text}",
        parse_mode="HTML"
    )

    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id:{context.user_data['answer_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}"
    )

    return ConversationHandler.END


async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.callback_query.message.from_user
    logger.info("%s id:%s %s", user.full_name, user.id, update.callback_query.message.text)

    query = update.callback_query
    await query.answer()

    user_id = query.data.partition('_')[2]
    await context.bot.send_location(user_id, latitude=54.4679700975935, longitude=64.7968144567598)

    await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id:{user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.")


def main() -> None:
    persistence = PicklePersistence(filepath="bot")
    application = Application.builder().token("TOKEN").persistence(
        persistence).build()

    contact_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("contact", contact)],
        states={
            SEND_CONTACT: [
                MessageHandler(~filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å") & filters.TEXT & ~filters.COMMAND, send_contact)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å") & ~filters.COMMAND, cancel),
            MessageHandler(filters.COMMAND, cancel),
        ],
        allow_reentry=True,
    )
    application.add_handler(contact_conv_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PRE_QUESTIONNAIRE: [
                MessageHandler(filters.Regex("^üëç$") & ~filters.COMMAND, pre_questionnaire),
                MessageHandler(filters.Regex("^üëé$") & ~filters.COMMAND, questionnaire_decline),
                MessageHandler(~filters.Regex("^(üëç|üëé)$") & ~filters.COMMAND, wrong_pre_questionnaire)
            ],
            QUESTIONNAIRE_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, questionnaire_start)],
            GENDER: [
                MessageHandler(filters.Regex("^–ú—É–∂—Å–∫–æ–π$|^–ñ–µ–Ω—Å–∫–∏–π$") & ~filters.COMMAND, gender),
                MessageHandler(~filters.Regex("^–ú—É–∂—Å–∫–æ–π$|^–ñ–µ–Ω—Å–∫–∏–π$") & ~filters.COMMAND, wrong_gender)
            ],
            FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_name)],
            LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, last_name)],
            AGE: [
                MessageHandler(filters.Regex("^(1[6-9]|[2-9][0-9])$") & ~filters.COMMAND, age),
                MessageHandler(~filters.Regex("^(1[6-9]|[2-9][0-9])$") & ~filters.COMMAND, wrong_age)
            ],
            PHOTO: [
                MessageHandler(filters.PHOTO, photo),
                MessageHandler(~filters.PHOTO & ~filters.COMMAND & ~filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), wrong_photo),
                MessageHandler(filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$") & ~filters.COMMAND, skip_photo)
            ],
            PHONE_NUMBER: [
                MessageHandler(
                    filters.Regex("^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$")
                    & ~filters.COMMAND, phone_number),
                MessageHandler(
                    ~filters.Regex("^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$")
                    & ~filters.COMMAND, wrong_phone_number)
            ],
            REGISTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_time)],
            DID_PARTICIPATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, did_participate)]
        },
        fallbacks=[MessageHandler(filters.COMMAND, cancel)],
        allow_reentry=True,
        name="questionnaire",
        persistent=True,
    )
    application.add_handler(conv_handler)

    answer_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(answer, pattern="^answer")],
        states={
            SEND_ANSWER: [
                MessageHandler(~filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å") & filters.TEXT & ~filters.COMMAND, send_answer),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å") & ~filters.COMMAND, cancel),
            MessageHandler(filters.COMMAND, cancel),
        ],
    )
    application.add_handler(answer_conv_handler)
    application.add_handler(CallbackQueryHandler(location, pattern="^location"))

    application.run_polling()


if __name__ == "__main__":
    main()
